package com.joojet.plugins.mobs.skills.attack;

import java.util.List;

import org.bukkit.Location;
import org.bukkit.Particle;
import org.bukkit.Sound;
import org.bukkit.entity.LivingEntity;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;

import com.joojet.plugins.agcraft.main.AGCraftPlugin;
import com.joojet.plugins.mobs.DamageDisplayListener;

public class ThundagaSkill extends AbstractAttackSkill {
	/** Number of targets this skill is targeting per use */
	protected int numTargets;
	/** Number of ticks before thunder casts over affected area */
	protected int thunderDelay;
	/** Power of the explosion generated by the lightning */
	protected float power;
	
	/** Creates a new instance of a Thundaga skill, creates a delayed, AOE thunderstorm spell
	 *  upon use.
	 *  @param range Range of the skill
	 *  @param cooldown Skill's cooldown (in seconds)
	 *  @param maxUses Max amount of times this skill can be used
	 *  @param weight Skill's priority weight
	 *  @param power Power of explosion once thunder hits
	 *  @param numTargets The max. amount of targets that will be randomly selected from this skill
	 *  @param thunderDelay Delay before thunder hits (in ticks) */
	public ThundagaSkill(int range, int cooldown, int maxUses, int weight, float power, int numTargets, int thunderDelay) {
		super(range, cooldown, maxUses, weight);
		this.power = power;
		this.numTargets = numTargets;
		this.thunderDelay = thunderDelay;
	}

	@Override
	protected void handleSkill(LivingEntity caster, List<LivingEntity> allies, List<LivingEntity> enemies,
			DamageDisplayListener damageDisplayListener) 
	{
		List <LivingEntity> targets = this.selectRandomEntities(enemies, this.numTargets);
		caster.getWorld().playSound(caster.getLocation(), Sound.ENTITY_ILLUSIONER_CAST_SPELL, 1.0f, 1.0f);
		
		for (LivingEntity target : targets)
		{
			Location targetLocation = target.getLocation().clone();
			new BukkitRunnable () 
			{
				// AOE delay ticks
				protected int ticks = thunderDelay;

				@Override
				public void run() 
				{
					// Gives caster invincibility for 3 ticks so he can survive his own thunder 
					if (this.ticks == 1)
					{
						caster.addPotionEffect(new PotionEffect (PotionEffectType.DAMAGE_RESISTANCE, 2, 5));
					}
					// Cast lightning and create explosion once delay is served
					else if (this.ticks <= 0)
					{
						targetLocation.getWorld().strikeLightning(targetLocation);
						targetLocation.getWorld().createExplosion(targetLocation.add(0.0, 1.0, 0.0), power, false, false, caster);
						this.cancel();
					}
					// Otherwise, play particle effects on the location
					else
					{
						targetLocation.getWorld().spawnParticle(Particle.SPELL_INSTANT, targetLocation, 10, 1.0, 1.0, 1.0);
						if (!caster.isDead())
						{
							caster.getWorld().spawnParticle(Particle.SPELL_INSTANT, caster.getLocation(), 10, 1.0, 1.0, 1.0);
							caster.getWorld().spawnParticle(Particle.VILLAGER_ANGRY, caster.getLocation(), 2, 1.0, 1.0, 1.0);
						}
					}
					
					--this.ticks;
				}
				
			}.runTaskTimer(AGCraftPlugin.plugin, 0, 1);
		}

	}

	@Override
	protected boolean checkConditons(LivingEntity caster, List<LivingEntity> allies, List<LivingEntity> enemies) {
		// TODO Auto-generated method stub
		return !enemies.isEmpty() && this.checkHealthIsBelowThreshold(caster, 0.60);
	}

}
