package com.joojet.plugins.mobs.skills.attack;

import java.util.List;

import org.bukkit.Sound;
import org.bukkit.entity.LivingEntity;

import com.joojet.plugins.agcraft.main.AGCraftPlugin;
import com.joojet.plugins.mobs.DamageDisplayListener;
import com.joojet.plugins.mobs.skills.runnable.ThunderSkillRunnable;

public class ThundagaSkill extends AbstractAttackSkill {
	/** Number of targets this skill is targeting per use */
	protected int numTargets;
	/** Number of ticks before thunder casts over affected area */
	protected int thunderDelay;
	/** Power of the explosion generated by the lightning */
	protected float power;
	/** Min. amount of health required in order for skill to be used */
	protected double healthThreshold;
	
	/** Creates a new instance of a Thundaga skill, creates a delayed, AOE thunderstorm spell
	 *  upon use.
	 *  @param range Range of the skill
	 *  @param cooldown Skill's cooldown (in seconds)
	 *  @param maxUses Max amount of times this skill can be used
	 *  @param weight Skill's priority weight
	 *  @param power Power of explosion once thunder hits
	 *  @param numTargets The max. amount of targets that will be randomly selected from this skill
	 *  @param thunderDelay Delay before thunder hits (in ticks)
	 *  @param healthThreshold Min. amount of health required in order for skill to be used */
	public ThundagaSkill(int range, int cooldown, int maxUses, int weight, float power, int numTargets, int thunderDelay, double healthThreshold) {
		super(range, cooldown, maxUses, weight);
		this.power = power;
		this.numTargets = numTargets;
		this.thunderDelay = thunderDelay;
		this.healthThreshold = healthThreshold;
	}

	@Override
	protected void handleSkill(LivingEntity caster, List<LivingEntity> allies, List<LivingEntity> enemies,
			DamageDisplayListener damageDisplayListener) 
	{
		List <LivingEntity> targets = this.selectRandomEntities(enemies, this.numTargets);
		caster.getWorld().playSound(caster.getLocation(), Sound.ENTITY_ILLUSIONER_CAST_SPELL, 1.0f, 1.0f);
		
		for (LivingEntity target : targets)
		{
			new ThunderSkillRunnable (this, target.getLocation(), caster, allies).runTaskTimer(AGCraftPlugin.plugin, 0, 1);
		}

	}

	@Override
	protected boolean checkConditons(LivingEntity caster, List<LivingEntity> allies, List<LivingEntity> enemies) {
		// TODO Auto-generated method stub
		return !enemies.isEmpty() && this.checkHealthIsBelowThreshold(caster, this.healthThreshold);
	}
	
	/** Returns the thunder's explosion power */
	public float getExplosionPower ()
	{
		return this.power;
	}
	
	/** Returns the delay (in ticks) before the thunder stikes the location */
	public int getDelayTicks ()
	{
		return this.thunderDelay;
	}

}
